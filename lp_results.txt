Timer unit: 1e-06 s

Total time: 0.031398 s
File: <ipython-input-22-cce3eafad61b>
Function: nufft_python at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           def nufft_python(x, c, M, df=1.0, eps=1E-15, iflag=1):
    15                                               """Fast Non-Uniform Fourier Transform with Python"""
    16         1           27     27.0      0.1      Msp, Mr, tau = _compute_grid_params(M, eps)
    17         1            1      1.0      0.0      N = len(x)
    18                                           
    19                                               # Construct the convolved grid
    20         1           54     54.0      0.2      ftau = np.zeros(Mr, dtype=c.dtype)
    21         1            2      2.0      0.0      Mr = ftau.shape[0]
    22         1            3      3.0      0.0      hx = 2 * np.pi / Mr
    23         1            8      8.0      0.0      mm = np.arange(-Msp, Msp)
    24      1001         1086      1.1      3.5      for i in range(N):
    25      1000         2283      2.3      7.3          xi = (x[i] * df) % (2 * np.pi)
    26      1000         1815      1.8      5.8          m = 1 + int(xi // hx)
    27      1000        15445     15.4     49.2          spread = np.exp(-0.25 * (xi - hx * (m + mm)) ** 2 / tau)
    28      1000        10340     10.3     32.9          ftau[(m + mm) % Mr] += c[i] * spread
    29                                           
    30                                               # Compute the FFT on the convolved grid
    31         1            1      1.0      0.0      if iflag < 0:
    32                                                   Ftau = (1 / Mr) * np.fft.fft(ftau)
    33                                               else:
    34         1          241    241.0      0.8          Ftau = np.fft.ifft(ftau)
    35         1           15     15.0      0.0      Ftau = np.concatenate([Ftau[-(M//2):], Ftau[:M//2 + M % 2]])
    36                                           
    37                                               # Deconvolve the grid using convolution theorem
    38         1           16     16.0      0.1      k = nufftfreqs(M)
    39         1           61     61.0      0.2      return (1 / N) * np.sqrt(np.pi / tau) * np.exp(tau * k ** 2) * Ftau

